{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","first","second","third","this","setState","parseInt","Math","random","slice","className","src","alt","action","method","type","id","name","placeholder","required","value","disabled","class","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oPAsDeA,G,wDAlDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,GACPC,OAAQ,GACRC,MAAO,IALQ,E,gEAUjBC,KAAKC,SAAS,CACZJ,OAAQ,KAAOK,SAAuB,GAAdC,KAAKC,WAAcC,OAAO,GAClDP,QAAS,KAAOI,SAAuB,GAAdC,KAAKC,WAAcC,OAAO,GACnDN,OAAQ,KAAOG,SAAuB,GAAdC,KAAKC,WAAcC,OAAO,O,+BAKpD,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,QACb,wGACA,gEAEF,yBAAKA,UAAU,UACb,yBAAKC,IAAK,UAAYP,KAAKJ,MAAMC,MAAO,OAAQS,UAAU,WAAWE,IAAI,iBACzE,yBAAKD,IAAK,UAAYP,KAAKJ,MAAME,OAAQ,OAAQQ,UAAU,WAAWE,IAAI,iBAC1E,yBAAKD,IAAK,UAAYP,KAAKJ,MAAMG,MAAO,OAAQO,UAAU,WAAWE,IAAI,kBAE3E,yBAAKF,UAAU,WACf,0BAAMG,OAAO,6CAA6CC,OAAO,QAC7D,2BAAOC,KAAK,OAAOC,GAAG,OAAOC,KAAK,OAAOC,YAAY,OAAOC,UAAQ,IACpE,2BAAOJ,KAAK,SAASC,GAAG,OAAOC,KAAK,OAAOG,MAAOd,SAASF,KAAKJ,MAAMC,SACtE,2BAAOc,KAAK,SAASC,GAAG,OAAOC,KAAK,OAAOG,MAAOd,SAASF,KAAKJ,MAAME,UACtE,2BAAOa,KAAK,SAASC,GAAG,OAAOC,KAAK,OAAOG,MAAOd,SAASF,KAAKJ,MAAMG,SACtE,4BAAQc,KAAK,QAAQD,GAAG,SACtB,4BAAQK,UAAQ,EAACD,MAAM,KAAvB,QACA,4BAAQA,MAAM,KAAd,OACA,4BAAQA,MAAM,KAAd,OACA,4BAAQA,MAAM,KAAd,OACA,4BAAQA,MAAM,KAAd,UAEF,4BAAQE,MAAM,SAASP,KAAK,UAA5B,iB,GA3CMQ,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.adc6962b.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      first: \"\",\n      second: \"\",\n      third: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      first: (\"00\" + parseInt(Math.random()*30)).slice(-3),\n      second: (\"00\" + parseInt(Math.random()*30)).slice(-3),\n      third: (\"00\" + parseInt(Math.random()*30)).slice(-3)\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <div className=\"info\">\n          <p>Some pictures are of normal strawberries. Some are of wedge strawberries.</p>\n          <p>Which strawberries are the same?</p>\n        </div>\n        <div className=\"images\">\n          <img src={\"./imgs/\" + this.state.first +\".jpg\"} className=\"identify\" alt=\"strawberry 1\"/>\n          <img src={\"./imgs/\" + this.state.second +\".jpg\"} className=\"identify\" alt=\"strawberry 2\"/>\n          <img src={\"./imgs/\" + this.state.third +\".jpg\"} className=\"identify\" alt=\"strawberry 3\"/>\n        </div>\n        <div className=\"options\">\n        <form action=\"https://airtable-api-626.herokuapp.com/api\" method=\"POST\">\n            <input type=\"text\" id=\"name\" name=\"name\" placeholder=\"Name\" required/>\n            <input type=\"hidden\" id=\"pic1\" name=\"pic1\" value={parseInt(this.state.first)}/>\n            <input type=\"hidden\" id=\"pic2\" name=\"pic2\" value={parseInt(this.state.second)}/>\n            <input type=\"hidden\" id=\"pic3\" name=\"pic3\" value={parseInt(this.state.third)}/>\n            <select name=\"match\" id=\"match\">\n              <option disabled value=\"0\">None</option>\n              <option value=\"1\">1,2</option>\n              <option value=\"2\">1,3</option>\n              <option value=\"3\">2,3</option>\n              <option value=\"4\">1,2,3</option>\n            </select>\n            <button class=\"submit\" type=\"submit\">Submit</button>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}